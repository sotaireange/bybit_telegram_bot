version: '3.9'

services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m app.telegram.main
    env_file:
      - .env
    volumes:
      - ./app:/app

    depends_on:
      - postgres
      - redis
    restart: always
    networks:
      - app-network

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m app.worker.main
    env_file:
      - .env
    environment:
      - SERVICE_NAME=worker
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    volumes:
      - ./app:/app/app
    depends_on:
      - postgres
      - redis
      - bot
    restart: always
    networks:
      - app-network

  postgres:
    image: postgres:15
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    command:
    - redis-server
    - '--loglevel notice'
    - '--databases 1'
    - '--save 900 1'
    - '--save 300 10'
    - '--dbfilename dump.rdb'
    - '--requirepass ${REDIS_PASSWORD}'
    - '--maxmemory 2048mb'
    - '--maxmemory-policy volatile-lru'
    - '--appendonly no'
    env_file:
      - .env
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - app-network

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge