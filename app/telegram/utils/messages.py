import pandas as pd
from typing import Dict,List

from app.db.models import User
from app.telegram.utils.sub_helper import get_sub_days
from datetime import datetime

class MessageBuilder:
    translations = {
        "leverage": "–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ",
        "balance": "–ë–∞–ª–∞–Ω—Å",
        "take_profit": "–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç",
        "size": "–†–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏",
        "api": "API –∫–ª—é—á",
        "secret": "API Secret",
        "user_sub": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏",
        'hedge_percentage': "–ü—Ä–æ—Ü–µ–Ω—Ç –•–µ–¥–∂–∞"
    }

    templates = {
        "welcome": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–æ—Ç–µ!!!",
        "api_secret_info": "–í–≤–µ–¥–∏—Ç–µ API/Secret, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø—ã –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ",
        "api_info": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–≤–æ–¥—É API",
        "secret_info": "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤–≤–æ–¥—É SECRET",
        "api_secret_success": "–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API",
        "api_secret_fail": "–ù–µ—É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API",
        "settings_title": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        "input_setting": "–£–∫–∞–∂–∏—Ç–µ {0}.\n–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç {1} –¥–æ {2}",
        "input_failure": (
            "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n"
            "–í—ã –≤–≤–µ–ª–∏ {0}\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç {1} –¥–æ {2}"
        ),
        "input_success": "–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ {0}.\n–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {1}",
        "value_error": "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n",
        "user_when_stop":"–í–∞—à –±–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n",
        "user_when_exit":"–í–∞—à –±–æ—Ç –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≤—ã—à–ª–∏ –∏–∑ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π.\n",
        "user_subscription":"–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {0} –¥–Ω–µ–π.\n",
        "user_unsub":"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞.\n",

    }

    months = {
        1: '–Ø–Ω–≤–∞—Ä—å',
        2: '–§–µ–≤—Ä–∞–ª—å',
        3: '–ú–∞—Ä—Ç',
        4: '–ê–ø—Ä–µ–ª—å',
        5: '–ú–∞–π',
        6: '–ò—é–Ω—å',
        7: '–ò—é–ª—å',
        8: '–ê–≤–≥—É—Å—Ç',
        9: '–°–µ–Ω—Ç—è–±—Ä—å',
        10: '–û–∫—Ç—è–±—Ä—å',
        11: '–ù–æ—è–±—Ä—å',
        12: '–î–µ–∫–∞–±—Ä—å'
    }


    def __init__(self):
        self.translations = self.__class__.translations.copy()
        self.templates = self.__class__.templates.copy()

    def __call__(self, key: str, *args):
        translated_args = [self.translations.get(arg, arg) if isinstance(arg, str) else arg for arg in args]
        template = self.templates.get(key)
        if template:
            return template.format(*translated_args)
        return f"‚ùå –®–∞–±–ª–æ–Ω '{key}' –Ω–µ –Ω–∞–π–¥–µ–Ω."

    @staticmethod
    def safe_round(value):
        try:
            return round(float(value), 2)
        except (TypeError, ValueError):
            return 0

    @staticmethod
    def format_tp(value):
        try:
            f = float(value)
            if f == 0:
                return "0".rjust(8)
            return f"{f:.6f}"[:8].rjust(8)
        except (TypeError, ValueError):
            return "0".rjust(8)

    @classmethod
    def get_menu_text(cls,user:User,pnl: Dict[datetime,float],flag_run:bool):
        text='–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n' if flag_run else '–ë–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\n'
        text+=cls.get_sub_text(user)
        text+=cls.get_pnl_text(pnl)
        return text

    @classmethod
    def get_position_text(cls,positions: List[Dict]):

        if len(positions)==0: return '–ü–æ–∑–∏—Ü–∏–π –Ω–µ—Ç'
        df=pd.DataFrame(positions)
        df['updatedTime']=df['updatedTime'].astype(int)
        df.sort_values(by=['symbol','updatedTime'],inplace=True,ascending=[False,True])

        last_symbol=''
        text = f"–û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}\n"
        text += "<pre>\n"
        text += (f"{'COIN':<9} {'–†–∞–∑–º–µ—Ä':>8}" #{'–¶–µ–Ω–∞':>9}"
                 f" {'–¢–µ–π–∫':>10} {'PNL':>8}\n")

        for position in positions:
            symbol = position.get('symbol', '‚Äî')[:-4]
            side = position.get('side', '')
            position_value = cls.safe_round(position.get('positionValue'))
            leverage= cls.safe_round(position.get('leverage'))
            position_size=round(position_value/leverage,2)
            #mark_price = cls.safe_round(position.get('markPrice'))
            take_profit_value = position.get('takeProfit') or 0
            take_profit_str = cls.format_tp(take_profit_value)
            unrealised_pnl = cls.safe_round(position.get('unrealisedPnl'))
            side_icon = 'üü¢' if side == 'Buy' else 'üî¥'

            coin_label = f"{side_icon}{symbol}"
            if symbol != last_symbol:
                coin_label += "(F)"
            else:
                coin_label += "(S)"

            text += (f"{coin_label:<9} {position_size:>6.2f}$" #{mark_price:>9.2f}$ "
                     f"{take_profit_str:>10}$ {unrealised_pnl:>8.2f}$\n")
            last_symbol = symbol

        text += "</pre>"
        return text


    @classmethod
    def get_permission_text(cls, has_permission: Dict) -> str:
        if not has_permission['has_api_secret']: return '–ù–µ —É–∫–∞–∑–∞–Ω API/Secret\n'
        extra = (f'{'–ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å.\n' if not has_permission['readonly'] else ''}'
                 f'{'–ï–¥–∏–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç: –û—Ä–¥–µ—Ä–∞, –ü–æ–∑–∏—Ü–∏–∏, –¢–æ—Ä–≥–æ–≤–ª—è –¥–µ—Ä–∏–∞—Ç–∏–≤–∞–º–∏ USDC.' if not has_permission['permissions'] else ''}')
        return f"–í—Å–µ –¥–æ—Å—Ç—É–ø—ã –∏–º–µ—é—Ç—Å—è\n –í–∞—à BybitUID {has_permission['result'].get('parentUid')}" if has_permission['status'] else f"–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø—ã: \n{extra}"

    @classmethod
    def get_pnl_text(cls,pnls:Dict[datetime,float]) -> str:
        text='–ü—Ä–æ—Ñ–∏—Ç:\n'
        for month,pnl in pnls.items():
            text+=f'{cls.months[month.month]}: {round(pnl,2)}$\n'
        if not len(pnls): return '–ü—Ä–æ—Ñ–∏—Ç: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        return text

    @classmethod
    def get_sub_text(cls, user: User) -> str:
        days = get_sub_days(user)
        return f'–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å {abs(days)} –¥–Ω–µ–π.\n' if days < 0 else "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞\n"

    @classmethod
    def get_settings_text(cls, user: User) -> str:
        return (
            f'{cls.templates["settings_title"]} \n'
            f'–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ - {user.size}%\n'
            f'–ë–∞–ª–∞–Ω—Å - {user.balance}%\n'
            f'–ö—Ä–µ–¥–∏—Ç–Ω–æ–µ –ø–ª–µ—á–æ - {user.leverage}\n'
            f'–¢–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç - {user.take_profit}%\n'
        )

    @classmethod
    def get_stock_text(cls, user: User) -> str:
        api_text = user.api if user.api else '–ù–µ —É–∫–∞–∑–∞–Ω'
        secret_text = user.secret if user.secret else '–ù–µ —É–∫–∞–∑–∞–Ω'
        return f'API - {api_text}\nSecret Key - {secret_text}\n'


msg=MessageBuilder()